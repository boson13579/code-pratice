path //adjenecy-matrix also as residual flow
nei //adjececy-list record neighbor use c++ uordered_set implement 

while input(u,v,w):
    path[u][v] += w //since may have different edge such that have same (u,v)
    nei[u].inert(v)
    nei[v].inert(u)


parent[|V|] //record parent
def bfs():
    for i=1 to V: parent[i] = 0
    queue.push({source, inf})

    while !queue.empty():
        nowd, nowf = queue.pop()
        for i in nei[nowd]:
            if path[now][i] > 0 and !parent[i]:
                parent[i] = now
                if i == sink:
                    return min(nowf, path[now][i])
                queue.push({i, min(nowf, path[now][i])})
    
    return 0

ans = 0
while(flow = bfs()):
    ans += flow
    cur = sink
    while (cur != source):
        from = p[cur];
        path[from][cur] -= flow;
        path[cur][from] += flow;
        cur = from;
    
print ans

